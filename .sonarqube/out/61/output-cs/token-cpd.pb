¶
~C:\Users\jay.ahir\Desktop\OrchardCore-main\OrchardCore-main\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobDirectory.cs
	namespace 	
OrchardCore
 
. 
FileStorage !
.! "
	AzureBlob" +
{ 
public 

class 
BlobDirectory 
:  
IFileStoreEntry! 0
{ 
private 
readonly 
string 
_path  %
;% &
private 
readonly 
DateTime !
_lastModifiedUtc" 2
;2 3
private		 
readonly		 
string		 
_name		  %
;		% &
private

 
readonly

 
string

 
_directoryPath

  .
;

. /
public 
BlobDirectory 
( 
string #
path$ (
,( )
DateTime* 2
lastModifiedUtc3 B
)B C
{ 	
_path 
= 
path 
; 
_lastModifiedUtc 
= 
lastModifiedUtc .
;. /
_name 
= 
System 
. 
IO 
. 
Path "
." #
GetFileName# .
(. /
path/ 3
)3 4
;4 5
_directoryPath 
= 
_path "
." #
Length# )
>* +
_name, 1
.1 2
Length2 8
?9 :
_path; @
.@ A
	SubstringA J
(J K
$numK L
,L M
_pathN S
.S T
LengthT Z
-[ \
_name] b
.b c
Lengthc i
-j k
$numl m
)m n
:o p
$strq s
;s t
} 	
public 
string 
Path 
=> 
_path #
;# $
public 
string 
Name 
=> 
_name #
;# $
public 
string 
DirectoryPath #
=>$ &
_directoryPath' 5
;5 6
public 
long 
Length 
=> 
$num 
;  
public 
DateTime 
LastModifiedUtc '
=>( *
_lastModifiedUtc+ ;
;; <
public 
bool 
IsDirectory 
=>  "
true# '
;' (
}   
}!! Õ
yC:\Users\jay.ahir\Desktop\OrchardCore-main\OrchardCore-main\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobFile.cs
	namespace 	
OrchardCore
 
. 
FileStorage !
.! "
	AzureBlob" +
{ 
public 

class 
BlobFile 
: 
IFileStoreEntry +
{ 
private 
readonly 
string 
_path  %
;% &
private 
readonly 
string 
_name  %
;% &
private		 
readonly		 
string		 
_directoryPath		  .
;		. /
private

 
readonly

 
long

 
?

 
_length

 &
;

& '
private 
readonly 
DateTimeOffset '
?' (
_lastModified) 6
;6 7
public 
BlobFile 
( 
string 
path #
,# $
long% )
?) *
length+ 1
,1 2
DateTimeOffset3 A
?A B
lastModifiedC O
)O P
{ 	
_path 
= 
path 
; 
_name 
= 
System 
. 
IO 
. 
Path "
." #
GetFileName# .
(. /
_path/ 4
)4 5
;5 6
if 
( 
_name 
== 
_path 
) 
{ 
_directoryPath 
=  
$str! #
;# $
} 
else 
{ 
_directoryPath 
=  
_path! &
.& '
	Substring' 0
(0 1
$num1 2
,2 3
_path4 9
.9 :
Length: @
-A B
_nameC H
.H I
LengthI O
-P Q
$numR S
)S T
;T U
} 
_length 
= 
length 
; 
_lastModified 
= 
lastModified (
;( )
} 	
public 
string 
Path 
=> 
_path #
;# $
public!! 
string!! 
Name!! 
=>!! 
_name!! #
;!!# $
public## 
string## 
DirectoryPath## #
=>##$ &
_directoryPath##' 5
;##5 6
public%% 
long%% 
Length%% 
=>%% 
_length%% %
.%%% &
GetValueOrDefault%%& 7
(%%7 8
)%%8 9
;%%9 :
public'' 
DateTime'' 
LastModifiedUtc'' '
=>''( *
_lastModified''+ 8
.''8 9
GetValueOrDefault''9 J
(''J K
)''K L
.''L M
UtcDateTime''M X
;''X Y
public)) 
bool)) 
IsDirectory)) 
=>))  "
false))# (
;))( )
}** 
}++ ê¡
~C:\Users\jay.ahir\Desktop\OrchardCore-main\OrchardCore-main\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobFileStore.cs
	namespace 	
OrchardCore
 
. 
FileStorage !
.! "
	AzureBlob" +
{ 
public&& 

class&& 
BlobFileStore&& 
:&&  

IFileStore&&! +
{'' 
private(( 
const(( 
string(( $
_directoryMarkerFileName(( 5
=((6 7
$str((8 O
;((O P
private** 
readonly** 
BlobStorageOptions** +
_options**, 4
;**4 5
private++ 
readonly++ 
IClock++ 
_clock++  &
;++& '
private,, 
readonly,, 
BlobContainerClient,, ,
_blobContainer,,- ;
;,,; <
private-- 
readonly--  
IContentTypeProvider-- - 
_contentTypeProvider--. B
;--B C
private.. 
readonly.. 
string.. 
_basePrefix..  +
=.., -
null... 2
;..2 3
public00 
BlobFileStore00 
(00 
BlobStorageOptions00 /
options000 7
,007 8
IClock009 ?
clock00@ E
,00E F 
IContentTypeProvider00G [
contentTypeProvider00\ o
)00o p
{11 	
_options22 
=22 
options22 
;22 
_clock33 
=33 
clock33 
;33  
_contentTypeProvider44  
=44! "
contentTypeProvider44# 6
;446 7
_blobContainer66 
=66 
new66  
BlobContainerClient66! 4
(664 5
_options665 =
.66= >
ConnectionString66> N
,66N O
_options66P X
.66X Y
ContainerName66Y f
)66f g
;66g h
if88 
(88 
!88 
String88 
.88 
IsNullOrEmpty88 %
(88% &
_options88& .
.88. /
BasePath88/ 7
)887 8
)888 9
{99 
_basePrefix:: 
=:: 
NormalizePrefix:: -
(::- .
_options::. 6
.::6 7
BasePath::7 ?
)::? @
;::@ A
};; 
}<< 	
public>> 
async>> 
Task>> 
<>> 
IFileStoreEntry>> )
>>>) *
GetFileInfoAsync>>+ ;
(>>; <
string>>< B
path>>C G
)>>G H
{?? 	
try@@ 
{AA 
varBB 
blobBB 
=BB 
GetBlobReferenceBB +
(BB+ ,
pathBB, 0
)BB0 1
;BB1 2
varDD 

propertiesDD 
=DD  
awaitDD! &
blobDD' +
.DD+ ,
GetPropertiesAsyncDD, >
(DD> ?
)DD? @
;DD@ A
returnFF 
newFF 
BlobFileFF #
(FF# $
pathFF$ (
,FF( )

propertiesFF* 4
.FF4 5
ValueFF5 :
.FF: ;
ContentLengthFF; H
,FFH I

propertiesFFJ T
.FFT U
ValueFFU Z
.FFZ [
LastModifiedFF[ g
)FFg h
;FFh i
}GG 
catchHH 
(HH "
RequestFailedExceptionHH )
exHH* ,
)HH, -
whenHH. 2
(HH3 4
exHH4 6
.HH6 7
	ErrorCodeHH7 @
==HHA C
BlobErrorCodeHHD Q
.HHQ R
BlobNotFoundHHR ^
)HH^ _
{II 
returnKK 
nullKK 
;KK 
}LL 
catchMM 
(MM 
	ExceptionMM 
exMM 
)MM  
{NN 
throwOO 
newOO 
FileStoreExceptionOO ,
(OO, -
$"OO- /
$strOO/ O
{OOO P
pathOOP T
}OOT U
$strOOU W
"OOW X
,OOX Y
exOOZ \
)OO\ ]
;OO] ^
}PP 
}QQ 	
publicSS 
asyncSS 
TaskSS 
<SS 
IFileStoreEntrySS )
>SS) *!
GetDirectoryInfoAsyncSS+ @
(SS@ A
stringSSA G
pathSSH L
)SSL M
{TT 	
tryUU 
{VV 
ifWW 
(WW 
pathWW 
==WW 
StringWW "
.WW" #
EmptyWW# (
)WW( )
{XX 
returnYY 
newYY 
BlobDirectoryYY ,
(YY, -
pathYY- 1
,YY1 2
_clockYY3 9
.YY9 :
UtcNowYY: @
)YY@ A
;YYA B
}ZZ 
var\\ 
blobDirectory\\ !
=\\" #
await\\$ )%
GetBlobDirectoryReference\\* C
(\\C D
path\\D H
)\\H I
;\\I J
if^^ 
(^^ 
blobDirectory^^ !
!=^^" $
null^^% )
)^^) *
{__ 
return`` 
new`` 
BlobDirectory`` ,
(``, -
path``- 1
,``1 2
_clock``3 9
.``9 :
UtcNow``: @
)``@ A
;``A B
}aa 
returncc 
nullcc 
;cc 
}dd 
catchee 
(ee 
	Exceptionee 
exee 
)ee  
{ff 
throwgg 
newgg 
FileStoreExceptiongg ,
(gg, -
$"gg- /
$strgg/ T
{ggT U
pathggU Y
}ggY Z
$strggZ \
"gg\ ]
,gg] ^
exgg_ a
)gga b
;ggb c
}hh 
}ii 	
publickk 
IAsyncEnumerablekk 
<kk  
IFileStoreEntrykk  /
>kk/ 0$
GetDirectoryContentAsynckk1 I
(kkI J
stringkkJ P
pathkkQ U
=kkV W
nullkkX \
,kk\ ]
boolkk^ b!
includeSubDirectorieskkc x
=kky z
false	kk{ 
)
kk 
{ll 	
trymm 
{nn 
ifoo 
(oo !
includeSubDirectoriesoo )
)oo) *
{pp 
returnqq (
GetDirectoryContentFlatAsyncqq 7
(qq7 8
pathqq8 <
)qq< =
;qq= >
}rr 
elsess 
{tt 
returnuu /
#GetDirectoryContentByHierarchyAsyncuu >
(uu> ?
pathuu? C
)uuC D
;uuD E
}vv 
}ww 
catchxx 
(xx 
	Exceptionxx 
exxx 
)xx  
{yy 
throwzz 
newzz 
FileStoreExceptionzz ,
(zz, -
$"zz- /
$strzz/ W
{zzW X
pathzzX \
}zz\ ]
$strzz] _
"zz_ `
,zz` a
exzzb d
)zzd e
;zze f
}{{ 
}|| 	
private~~ 
async~~ 
IAsyncEnumerable~~ &
<~~& '
IFileStoreEntry~~' 6
>~~6 7/
#GetDirectoryContentByHierarchyAsync~~8 [
(~~[ \
string~~\ b
path~~c g
=~~h i
null~~j n
)~~n o
{ 	
var
 
prefix
 
=
 
this
 
.
 
Combine
 %
(
% &
_basePrefix
& 1
,
1 2
path
3 7
)
7 8
;
8 9
prefix
 
=
 
NormalizePrefix
 $
(
$ %
prefix
% +
)
+ ,
;
, -
var
 
page
 
=
 
_blobContainer
 %
.
% &&
GetBlobsByHierarchyAsync
& >
(
> ?

BlobTraits
? I
.
I J
Metadata
J R
,
R S

BlobStates
T ^
.
^ _
None
_ c
,
c d
$str
e h
,
h i
prefix
j p
)
p q
;
q r
await
 
foreach
 
(
 
var
 
blob
 #
in
$ &
page
' +
)
+ ,
{
 
if
 
(
 
blob
 
.
 
IsPrefix
 !
)
! "
{
 
var
 

folderPath
 "
=
# $
blob
% )
.
) *
Prefix
* 0
;
0 1
if
 
(
 
!
 
String
 
.
  
IsNullOrEmpty
  -
(
- .
_basePrefix
. 9
)
9 :
)
: ;
{
 

folderPath
 "
=
# $

folderPath
% /
.
/ 0
	Substring
0 9
(
9 :
_basePrefix
: E
.
E F
Length
F L
-
M N
$num
O P
)
P Q
;
Q R
}
 

folderPath
 
=
  

folderPath
! +
.
+ ,
Trim
, 0
(
0 1
$char
1 4
)
4 5
;
5 6
yield
 
return
  
new
! $
BlobDirectory
% 2
(
2 3

folderPath
3 =
,
= >
_clock
? E
.
E F
UtcNow
F L
)
L M
;
M N
}
 
else
 
{
 
var
 
itemName
  
=
! "
Path
# '
.
' (
GetFileName
( 3
(
3 4

WebUtility
4 >
.
> ?
	UrlDecode
? H
(
H I
blob
I M
.
M N
Blob
N R
.
R S
Name
S W
)
W X
)
X Y
.
Y Z
Trim
Z ^
(
^ _
$char
_ b
)
b c
;
c d
if
 
(
 
itemName
  
!=
! #&
_directoryMarkerFileName
$ <
)
< =
{
 
var
 
itemPath
 $
=
% &
this
' +
.
+ ,
Combine
, 3
(
3 4
path
4 8
?
8 9
.
9 :
Trim
: >
(
> ?
$char
? B
)
B C
,
C D
itemName
E M
)
M N
;
N O
yield
 
return
 $
new
% (
BlobFile
) 1
(
1 2
itemPath
2 :
,
: ;
blob
< @
.
@ A
Blob
A E
.
E F

Properties
F P
.
P Q
ContentLength
Q ^
,
^ _
blob
` d
.
d e
Blob
e i
.
i j

Properties
j t
.
t u
LastModifiedu 
) 
; 
}
 
}
 
}
 
}
 	
private
 
async
 
IAsyncEnumerable
 &
<
& '
IFileStoreEntry
' 6
>
6 7*
GetDirectoryContentFlatAsync
8 T
(
T U
string
U [
path
\ `
=
a b
null
c g
)
g h
{
   	
var
¢¢ 
directories
¢¢ 
=
¢¢ 
new
¢¢ !
HashSet
¢¢" )
<
¢¢) *
string
¢¢* 0
>
¢¢0 1
(
¢¢1 2
)
¢¢2 3
;
¢¢3 4
var
¤¤ 
prefix
¤¤ 
=
¤¤ 
this
¤¤ 
.
¤¤ 
Combine
¤¤ %
(
¤¤% &
_basePrefix
¤¤& 1
,
¤¤1 2
path
¤¤3 7
)
¤¤7 8
;
¤¤8 9
prefix
¥¥ 
=
¥¥ 
NormalizePrefix
¥¥ $
(
¥¥$ %
prefix
¥¥% +
)
¥¥+ ,
;
¥¥, -
var
§§ 
page
§§ 
=
§§ 
_blobContainer
§§ %
.
§§% &
GetBlobsAsync
§§& 3
(
§§3 4

BlobTraits
§§4 >
.
§§> ?
Metadata
§§? G
,
§§G H

BlobStates
§§I S
.
§§S T
None
§§T X
,
§§X Y
prefix
§§Z `
)
§§` a
;
§§a b
await
¨¨ 
foreach
¨¨ 
(
¨¨ 
var
¨¨ 
blob
¨¨ #
in
¨¨$ &
page
¨¨' +
)
¨¨+ ,
{
©© 
var
ªª 
name
ªª 
=
ªª 

WebUtility
ªª %
.
ªª% &
	UrlDecode
ªª& /
(
ªª/ 0
blob
ªª0 4
.
ªª4 5
Name
ªª5 9
)
ªª9 :
;
ªª: ;
var
¯¯ 
	directory
¯¯ 
=
¯¯ 
Path
¯¯  $
.
¯¯$ %
GetDirectoryName
¯¯% 5
(
¯¯5 6
name
¯¯6 :
)
¯¯: ;
;
¯¯; <
if
±± 
(
±± 
!
±± 
String
±± 
.
±± 
IsNullOrEmpty
±± )
(
±±) *
_basePrefix
±±* 5
)
±±5 6
)
±±6 7
{
²² 
	directory
³³ 
=
³³ 
	directory
³³  )
.
³³) *
	Substring
³³* 3
(
³³3 4
_basePrefix
³³4 ?
.
³³? @
Length
³³@ F
-
³³G H
$num
³³I J
)
³³J K
;
³³K L
}
´´ 
if
¶¶ 
(
¶¶ 
!
¶¶ 
String
¶¶ 
.
¶¶ 
IsNullOrEmpty
¶¶ )
(
¶¶) *
	directory
¶¶* 3
)
¶¶3 4
&&
¶¶5 7
!
¶¶8 9
directories
¶¶9 D
.
¶¶D E
Contains
¶¶E M
(
¶¶M N
	directory
¶¶N W
)
¶¶W X
&&
¶¶Y [
(
¶¶\ ]
String
¶¶] c
.
¶¶c d
IsNullOrEmpty
¶¶d q
(
¶¶q r
path
¶¶r v
)
¶¶v w
?
¶¶x y
true
¶¶z ~
:¶¶ 
!¶¶ 
	directory¶¶ 
.¶¶ 
EndsWith¶¶ 
(¶¶ 
path¶¶ 
)¶¶ 
)¶¶ 
)¶¶ 
{
·· 
directories
¸¸ 
.
¸¸  
Add
¸¸  #
(
¸¸# $
	directory
¸¸$ -
)
¸¸- .
;
¸¸. /
yield
¹¹ 
return
¹¹  
new
¹¹! $
BlobDirectory
¹¹% 2
(
¹¹2 3
	directory
¹¹3 <
,
¹¹< =
_clock
¹¹> D
.
¹¹D E
UtcNow
¹¹E K
)
¹¹K L
;
¹¹L M
}
ºº 
if
½½ 
(
½½ 
!
½½ 
name
½½ 
.
½½ 
EndsWith
½½ "
(
½½" #&
_directoryMarkerFileName
½½# ;
)
½½; <
)
½½< =
{
¾¾ 
if
¿¿ 
(
¿¿ 
!
¿¿ 
String
¿¿ 
.
¿¿  
IsNullOrEmpty
¿¿  -
(
¿¿- .
_basePrefix
¿¿. 9
)
¿¿9 :
)
¿¿: ;
{
ÀÀ 
name
ÁÁ 
=
ÁÁ 
name
ÁÁ #
.
ÁÁ# $
	Substring
ÁÁ$ -
(
ÁÁ- .
_basePrefix
ÁÁ. 9
.
ÁÁ9 :
Length
ÁÁ: @
-
ÁÁA B
$num
ÁÁC D
)
ÁÁD E
;
ÁÁE F
}
ÂÂ 
yield
ÃÃ 
return
ÃÃ  
new
ÃÃ! $
BlobFile
ÃÃ% -
(
ÃÃ- .
name
ÃÃ. 2
.
ÃÃ2 3
Trim
ÃÃ3 7
(
ÃÃ7 8
$char
ÃÃ8 ;
)
ÃÃ; <
,
ÃÃ< =
blob
ÃÃ> B
.
ÃÃB C

Properties
ÃÃC M
.
ÃÃM N
ContentLength
ÃÃN [
,
ÃÃ[ \
blob
ÃÃ] a
.
ÃÃa b

Properties
ÃÃb l
.
ÃÃl m
LastModified
ÃÃm y
)
ÃÃy z
;
ÃÃz {
}
ÄÄ 
}
ÅÅ 
}
ÆÆ 	
public
ÈÈ 
async
ÈÈ 
Task
ÈÈ 
<
ÈÈ 
bool
ÈÈ 
>
ÈÈ %
TryCreateDirectoryAsync
ÈÈ  7
(
ÈÈ7 8
string
ÈÈ8 >
path
ÈÈ? C
)
ÈÈC D
{
ÉÉ 	
try
ÍÍ 
{
ÎÎ 
var
ÏÏ 
blobFile
ÏÏ 
=
ÏÏ 
GetBlobReference
ÏÏ /
(
ÏÏ/ 0
path
ÏÏ0 4
)
ÏÏ4 5
;
ÏÏ5 6
if
ÑÑ 
(
ÑÑ 
await
ÑÑ 
blobFile
ÑÑ "
.
ÑÑ" #
ExistsAsync
ÑÑ# .
(
ÑÑ. /
)
ÑÑ/ 0
)
ÑÑ0 1
{
ÒÒ 
throw
ÓÓ 
new
ÓÓ  
FileStoreException
ÓÓ 0
(
ÓÓ0 1
$"
ÓÓ1 3
$str
ÓÓ3 ]
{
ÓÓ] ^
path
ÓÓ^ b
}
ÓÓb c
$strÓÓc 
"ÓÓ 
)ÓÓ 
;ÓÓ 
}
ÔÔ 
var
ÖÖ 
blobDirectory
ÖÖ !
=
ÖÖ" #
await
ÖÖ$ )'
GetBlobDirectoryReference
ÖÖ* C
(
ÖÖC D
path
ÖÖD H
)
ÖÖH I
;
ÖÖI J
if
×× 
(
×× 
blobDirectory
×× !
==
××" $
null
××% )
)
××) *
{
ØØ 
await
ÙÙ "
CreateDirectoryAsync
ÙÙ .
(
ÙÙ. /
path
ÙÙ/ 3
)
ÙÙ3 4
;
ÙÙ4 5
}
ÚÚ 
return
ÜÜ 
true
ÜÜ 
;
ÜÜ 
}
ÝÝ 
catch
ÞÞ 
(
ÞÞ  
FileStoreException
ÞÞ %
)
ÞÞ% &
{
ßß 
throw
àà 
;
àà 
}
áá 
catch
ââ 
(
ââ 
	Exception
ââ 
ex
ââ 
)
ââ  
{
ãã 
throw
ää 
new
ää  
FileStoreException
ää ,
(
ää, -
$"
ää- /
$str
ää/ H
{
ääH I
path
ääI M
}
ääM N
$str
ääN P
"
ääP Q
,
ääQ R
ex
ääS U
)
ääU V
;
ääV W
}
åå 
}
ææ 	
public
èè 
async
èè 
Task
èè 
<
èè 
bool
èè 
>
èè  
TryDeleteFileAsync
èè  2
(
èè2 3
string
èè3 9
path
èè: >
)
èè> ?
{
éé 	
try
êê 
{
ëë 
var
ìì 
blob
ìì 
=
ìì 
GetBlobReference
ìì +
(
ìì+ ,
path
ìì, 0
)
ìì0 1
;
ìì1 2
return
îî 
await
îî 
blob
îî !
.
îî! "!
DeleteIfExistsAsync
îî" 5
(
îî5 6
)
îî6 7
;
îî7 8
}
ïï 
catch
ðð 
(
ðð 
	Exception
ðð 
ex
ðð 
)
ðð  
{
ññ 
throw
òò 
new
òò  
FileStoreException
òò ,
(
òò, -
$"
òò- /
$str
òò/ C
{
òòC D
path
òòD H
}
òòH I
$str
òòI K
"
òòK L
,
òòL M
ex
òòN P
)
òòP Q
;
òòQ R
}
óó 
}
ôô 	
public
öö 
async
öö 
Task
öö 
<
öö 
bool
öö 
>
öö %
TryDeleteDirectoryAsync
öö  7
(
öö7 8
string
öö8 >
path
öö? C
)
ööC D
{
÷÷ 	
try
øø 
{
ùù 
if
úú 
(
úú 
String
úú 
.
úú 
IsNullOrEmpty
úú (
(
úú( )
path
úú) -
)
úú- .
)
úú. /
{
ûû 
throw
üü 
new
üü  
FileStoreException
üü 0
(
üü0 1
$str
üü1 T
)
üüT U
;
üüU V
}
ýý 
var
ÿÿ 
blobsWereDeleted
ÿÿ $
=
ÿÿ% &
false
ÿÿ' ,
;
ÿÿ, -
var
 
prefix
 
=
 
this
 !
.
! "
Combine
" )
(
) *
_basePrefix
* 5
,
5 6
path
7 ;
)
; <
;
< =
prefix
 
=
 
this
 
.
 
NormalizePrefix
 -
(
- .
prefix
. 4
)
4 5
;
5 6
var
 
page
 
=
 
_blobContainer
 )
.
) *
GetBlobsAsync
* 7
(
7 8

BlobTraits
8 B
.
B C
Metadata
C K
,
K L

BlobStates
M W
.
W X
None
X \
,
\ ]
prefix
^ d
)
d e
;
e f
await
 
foreach
 
(
 
var
 "
blob
# '
in
( *
page
+ /
)
/ 0
{
 
var
 
blobReference
 %
=
& '
_blobContainer
( 6
.
6 7
GetBlobClient
7 D
(
D E
blob
E I
.
I J
Name
J N
)
N O
;
O P
await
 
blobReference
 '
.
' (!
DeleteIfExistsAsync
( ;
(
; <#
DeleteSnapshotsOption
< Q
.
Q R
IncludeSnapshots
R b
)
b c
;
c d
blobsWereDeleted
 $
=
% &
true
' +
;
+ ,
}
 
return
 
blobsWereDeleted
 '
;
' (
}
 
catch
 
(
  
FileStoreException
 %
)
% &
{
 
throw
 
;
 
}
 
catch
 
(
 
	Exception
 
ex
 
)
  
{
 
throw
 
new
  
FileStoreException
 ,
(
, -
$"
- /
$str
/ H
{
H I
path
I M
}
M N
$str
N P
"
P Q
,
Q R
ex
S U
)
U V
;
V W
}
 
}
 	
public
 
async
 
Task
 
MoveFileAsync
 '
(
' (
string
( .
oldPath
/ 6
,
6 7
string
8 >
newPath
? F
)
F G
{
 	
try
 
{
 
await
 
CopyFileAsync
 #
(
# $
oldPath
$ +
,
+ ,
newPath
- 4
)
4 5
;
5 6
await
  
TryDeleteFileAsync
 (
(
( )
oldPath
) 0
)
0 1
;
1 2
}
 
catch
 
(
 
	Exception
 
ex
 
)
  
{
 
throw
   
new
    
FileStoreException
   ,
(
  , -
$"
  - /
$str
  / A
{
  A B
oldPath
  B I
}
  I J
$str
  J P
{
  P Q
newPath
  Q X
}
  X Y
$str
  Y [
"
  [ \
,
  \ ]
ex
  ^ `
)
  ` a
;
  a b
}
¡¡ 
}
¢¢ 	
public
¤¤ 
async
¤¤ 
Task
¤¤ 
CopyFileAsync
¤¤ '
(
¤¤' (
string
¤¤( .
srcPath
¤¤/ 6
,
¤¤6 7
string
¤¤8 >
dstPath
¤¤? F
)
¤¤F G
{
¥¥ 	
try
¦¦ 
{
§§ 
if
¨¨ 
(
¨¨ 
srcPath
¨¨ 
==
¨¨ 
dstPath
¨¨ &
)
¨¨& '
{
©© 
throw
ªª 
new
ªª 
ArgumentException
ªª /
(
ªª/ 0
$"
ªª0 2
$str
ªª2 A
{
ªªA B
nameof
ªªB H
(
ªªH I
srcPath
ªªI P
)
ªªP Q
}
ªªQ R
$str
ªªR W
{
ªªW X
nameof
ªªX ^
(
ªª^ _
dstPath
ªª_ f
)
ªªf g
}
ªªg h
$str
ªªh ~
"
ªª~ 
)ªª 
;ªª 
}
«« 
var
­­ 
oldBlob
­­ 
=
­­ 
GetBlobReference
­­ .
(
­­. /
srcPath
­­/ 6
)
­­6 7
;
­­7 8
var
®® 
newBlob
®® 
=
®® 
GetBlobReference
®® .
(
®®. /
dstPath
®®/ 6
)
®®6 7
;
®®7 8
if
°° 
(
°° 
!
°° 
await
°° 
oldBlob
°° "
.
°°" #
ExistsAsync
°°# .
(
°°. /
)
°°/ 0
)
°°0 1
{
±± 
throw
²² 
new
²²  
FileStoreException
²² 0
(
²²0 1
$"
²²1 3
$str
²²3 E
{
²²E F
srcPath
²²F M
}
²²M N
$str
²²N j
"
²²j k
)
²²k l
;
²²l m
}
³³ 
if
µµ 
(
µµ 
await
µµ 
newBlob
µµ !
.
µµ! "
ExistsAsync
µµ" -
(
µµ- .
)
µµ. /
)
µµ/ 0
{
¶¶ 
throw
·· 
new
··  
FileStoreException
·· 0
(
··0 1
$"
··1 3
$str
··3 E
{
··E F
srcPath
··F M
}
··M N
$str
··N 
{·· 
dstPath·· 
}·· 
$str·· 
"·· 
)·· 
;·· 
}
¸¸ 
await
ºº 
newBlob
ºº 
.
ºº #
StartCopyFromUriAsync
ºº 3
(
ºº3 4
oldBlob
ºº4 ;
.
ºº; <
Uri
ºº< ?
)
ºº? @
;
ºº@ A
await
¼¼ 
Task
¼¼ 
.
¼¼ 
Delay
¼¼  
(
¼¼  !
$num
¼¼! $
)
¼¼$ %
;
¼¼% &
var
½½ 

properties
½½ 
=
½½  
await
½½! &
newBlob
½½' .
.
½½. / 
GetPropertiesAsync
½½/ A
(
½½A B
)
½½B C
;
½½C D
while
¿¿ 
(
¿¿ 

properties
¿¿ !
.
¿¿! "
Value
¿¿" '
.
¿¿' (

CopyStatus
¿¿( 2
==
¿¿3 5

CopyStatus
¿¿6 @
.
¿¿@ A
Pending
¿¿A H
)
¿¿H I
{
ÀÀ 
await
ÁÁ 
Task
ÁÁ 
.
ÁÁ 
Delay
ÁÁ $
(
ÁÁ$ %
$num
ÁÁ% (
)
ÁÁ( )
;
ÁÁ) *

properties
ÃÃ 
=
ÃÃ  
await
ÃÃ! &
newBlob
ÃÃ' .
.
ÃÃ. / 
GetPropertiesAsync
ÃÃ/ A
(
ÃÃA B
)
ÃÃB C
;
ÃÃC D
}
ÄÄ 
if
ÆÆ 
(
ÆÆ 

properties
ÆÆ 
.
ÆÆ 
Value
ÆÆ $
.
ÆÆ$ %

CopyStatus
ÆÆ% /
!=
ÆÆ0 2

CopyStatus
ÆÆ3 =
.
ÆÆ= >
Success
ÆÆ> E
)
ÆÆE F
{
ÇÇ 
throw
ÈÈ 
new
ÈÈ  
FileStoreException
ÈÈ 0
(
ÈÈ0 1
$"
ÈÈ1 3
$str
ÈÈ3 M
{
ÈÈM N
srcPath
ÈÈN U
}
ÈÈU V
$str
ÈÈV {
{
ÈÈ{ |

propertiesÈÈ| 
.ÈÈ 
ValueÈÈ 
.ÈÈ 

CopyStatusÈÈ 
}ÈÈ 
$strÈÈ ©
{ÈÈ© ª

propertiesÈÈª ´
.ÈÈ´ µ
ValueÈÈµ º
.ÈÈº »%
CopyStatusDescriptionÈÈ» Ð
}ÈÈÐ Ñ
$strÈÈÑ Ò
"ÈÈÒ Ó
)ÈÈÓ Ô
;ÈÈÔ Õ
}
ÉÉ 
}
ÊÊ 
catch
ËË 
(
ËË  
FileStoreException
ËË %
)
ËË% &
{
ÌÌ 
throw
ÍÍ 
;
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ  
{
ÐÐ 
throw
ÑÑ 
new
ÑÑ  
FileStoreException
ÑÑ ,
(
ÑÑ, -
$"
ÑÑ- /
$str
ÑÑ/ A
{
ÑÑA B
srcPath
ÑÑB I
}
ÑÑI J
$str
ÑÑJ P
{
ÑÑP Q
dstPath
ÑÑQ X
}
ÑÑX Y
$str
ÑÑY [
"
ÑÑ[ \
,
ÑÑ\ ]
ex
ÑÑ^ `
)
ÑÑ` a
;
ÑÑa b
}
ÒÒ 
}
ÓÓ 	
public
ÕÕ 
async
ÕÕ 
Task
ÕÕ 
<
ÕÕ 
Stream
ÕÕ  
>
ÕÕ  ! 
GetFileStreamAsync
ÕÕ" 4
(
ÕÕ4 5
string
ÕÕ5 ;
path
ÕÕ< @
)
ÕÕ@ A
{
ÖÖ 	
try
×× 
{
ØØ 
var
ÙÙ 
blob
ÙÙ 
=
ÙÙ 
GetBlobReference
ÙÙ +
(
ÙÙ+ ,
path
ÙÙ, 0
)
ÙÙ0 1
;
ÙÙ1 2
if
ÛÛ 
(
ÛÛ 
!
ÛÛ 
await
ÛÛ 
blob
ÛÛ 
.
ÛÛ  
ExistsAsync
ÛÛ  +
(
ÛÛ+ ,
)
ÛÛ, -
)
ÛÛ- .
{
ÜÜ 
throw
ÝÝ 
new
ÝÝ  
FileStoreException
ÝÝ 0
(
ÝÝ0 1
$"
ÝÝ1 3
$str
ÝÝ3 \
{
ÝÝ\ ]
path
ÝÝ] a
}
ÝÝa b
$str
ÝÝb s
"
ÝÝs t
)
ÝÝt u
;
ÝÝu v
}
ÞÞ 
return
àà 
(
àà 
await
àà 
blob
àà "
.
àà" #
DownloadAsync
àà# 0
(
àà0 1
)
àà1 2
)
àà2 3
.
àà3 4
Value
àà4 9
.
àà9 :
Content
àà: A
;
ààA B
}
áá 
catch
ââ 
(
ââ  
FileStoreException
ââ %
)
ââ% &
{
ãã 
throw
ää 
;
ää 
}
åå 
catch
ææ 
(
ææ 
	Exception
ææ 
ex
ææ 
)
ææ  
{
çç 
throw
èè 
new
èè  
FileStoreException
èè ,
(
èè, -
$"
èè- /
$str
èè/ S
{
èèS T
path
èèT X
}
èèX Y
$str
èèY [
"
èè[ \
,
èè\ ]
ex
èè^ `
)
èè` a
;
èèa b
}
éé 
}
êê 	
public
îî 
Task
îî 
<
îî 
Stream
îî 
>
îî  
GetFileStreamAsync
îî .
(
îî. /
IFileStoreEntry
îî/ >
fileStoreEntry
îî? M
)
îîM N
{
ïï 	
return
ðð  
GetFileStreamAsync
ðð %
(
ðð% &
fileStoreEntry
ðð& 4
.
ðð4 5
Path
ðð5 9
)
ðð9 :
;
ðð: ;
}
ññ 	
public
óó 
async
óó 
Task
óó 
<
óó 
string
óó  
>
óó  !'
CreateFileFromStreamAsync
óó" ;
(
óó; <
string
óó< B
path
óóC G
,
óóG H
Stream
óóI O
inputStream
óóP [
,
óó[ \
bool
óó] a
	overwrite
óób k
=
óól m
false
óón s
)
óós t
{
ôô 	
try
õõ 
{
öö 
var
÷÷ 
blob
÷÷ 
=
÷÷ 
GetBlobReference
÷÷ +
(
÷÷+ ,
path
÷÷, 0
)
÷÷0 1
;
÷÷1 2
if
ùù 
(
ùù 
!
ùù 
	overwrite
ùù 
&&
ùù !
await
ùù" '
blob
ùù( ,
.
ùù, -
ExistsAsync
ùù- 8
(
ùù8 9
)
ùù9 :
)
ùù: ;
{
úú 
throw
ûû 
new
ûû  
FileStoreException
ûû 0
(
ûû0 1
$"
ûû1 3
$str
ûû3 G
{
ûûG H
path
ûûH L
}
ûûL M
$str
ûûM i
"
ûûi j
)
ûûj k
;
ûûk l
}
üü "
_contentTypeProvider
þþ $
.
þþ$ %
TryGetContentType
þþ% 6
(
þþ6 7
path
þþ7 ;
,
þþ; <
out
þþ= @
var
þþA D
contentType
þþE P
)
þþP Q
;
þþQ R
var
 
headers
 
=
 
new
 !
BlobHttpHeaders
" 1
{
 
ContentType
 
=
  !
contentType
" -
??
. 0
$str
1 K
}
 
;
 
await
 
blob
 
.
 
UploadAsync
 &
(
& '
inputStream
' 2
,
2 3
headers
4 ;
)
; <
;
< =
return
 
path
 
;
 
}
 
catch
 
(
  
FileStoreException
 %
)
% &
{
 
throw
 
;
 
}
 
catch
 
(
 
	Exception
 
ex
 
)
  
{
 
throw
 
new
  
FileStoreException
 ,
(
, -
$"
- /
$str
/ C
{
C D
path
D H
}
H I
$str
I K
"
K L
,
L M
ex
N P
)
P Q
;
Q R
}
 
}
 	
private
 

BlobClient
 
GetBlobReference
 +
(
+ ,
string
, 2
path
3 7
)
7 8
{
 	
var
 
blobPath
 
=
 
this
 
.
  
Combine
  '
(
' (
_options
( 0
.
0 1
BasePath
1 9
,
9 :
path
; ?
)
? @
;
@ A
var
 
blob
 
=
 
_blobContainer
 %
.
% &
GetBlobClient
& 3
(
3 4
blobPath
4 <
)
< =
;
= >
return
 
blob
 
;
 
}
 	
private
 
async
 
Task
 
<
 
BlobHierarchyItem
 ,
>
, -'
GetBlobDirectoryReference
. G
(
G H
string
H N
path
O S
)
S T
{
 	
var
 
prefix
 
=
 
this
 
.
 
Combine
 %
(
% &
_basePrefix
& 1
,
1 2
path
3 7
)
7 8
;
8 9
prefix
 
=
 
NormalizePrefix
 $
(
$ %
prefix
% +
)
+ ,
;
, -
var
¡¡ 
page
¡¡ 
=
¡¡ 
_blobContainer
¡¡ %
.
¡¡% &&
GetBlobsByHierarchyAsync
¡¡& >
(
¡¡> ?

BlobTraits
¡¡? I
.
¡¡I J
Metadata
¡¡J R
,
¡¡R S

BlobStates
¡¡T ^
.
¡¡^ _
None
¡¡_ c
,
¡¡c d
$str
¡¡e h
,
¡¡h i
prefix
¡¡j p
)
¡¡p q
;
¡¡q r
var
££ 

enumerator
££ 
=
££ 
page
££ !
.
££! " 
GetAsyncEnumerator
££" 4
(
££4 5
)
££5 6
;
££6 7
var
¥¥ 
result
¥¥ 
=
¥¥ 
await
¥¥ 

enumerator
¥¥ )
.
¥¥) *
MoveNextAsync
¥¥* 7
(
¥¥7 8
)
¥¥8 9
;
¥¥9 :
if
¦¦ 
(
¦¦ 
result
¦¦ 
)
¦¦ 
{
§§ 
return
¨¨ 

enumerator
¨¨ !
.
¨¨! "
Current
¨¨" )
;
¨¨) *
}
©© 
return
«« 
null
«« 
;
«« 
}
¬¬ 	
private
®® 
async
®® 
Task
®® "
CreateDirectoryAsync
®® /
(
®®/ 0
string
®®0 6
path
®®7 ;
)
®®; <
{
¯¯ 	
var
°° 
placeholderBlob
°° 
=
°°  !
GetBlobReference
°°" 2
(
°°2 3
this
°°3 7
.
°°7 8
Combine
°°8 ?
(
°°? @
path
°°@ D
,
°°D E&
_directoryMarkerFileName
°°F ^
)
°°^ _
)
°°_ `
;
°°` a
using
³³ 
(
³³ 
var
³³ 
stream
³³ 
=
³³ 
new
³³  #
MemoryStream
³³$ 0
(
³³0 1
Encoding
³³1 9
.
³³9 :
UTF8
³³: >
.
³³> ?
GetBytes
³³? G
(
³³G H
$str³³H 
)³³ 
)³³ 
)³³ 
{
´´ 
await
µµ 
placeholderBlob
µµ %
.
µµ% &
UploadAsync
µµ& 1
(
µµ1 2
stream
µµ2 8
)
µµ8 9
;
µµ9 :
}
¶¶ 
}
·· 	
private
¼¼ 
string
¼¼ 
NormalizePrefix
¼¼ &
(
¼¼& '
string
¼¼' -
prefix
¼¼. 4
)
¼¼4 5
{
½½ 	
prefix
¾¾ 
=
¾¾ 
prefix
¾¾ 
.
¾¾ 
Trim
¾¾  
(
¾¾  !
$char
¾¾! $
)
¾¾$ %
+
¾¾& '
$char
¾¾( +
;
¾¾+ ,
if
¿¿ 
(
¿¿ 
prefix
¿¿ 
.
¿¿ 
Length
¿¿ 
==
¿¿  
$num
¿¿! "
)
¿¿" #
{
ÀÀ 
return
ÁÁ 
String
ÁÁ 
.
ÁÁ 
Empty
ÁÁ #
;
ÁÁ# $
}
ÂÂ 
else
ÃÃ 
{
ÄÄ 
return
ÅÅ 
prefix
ÅÅ 
;
ÅÅ 
}
ÆÆ 
}
ÇÇ 	
}
ÈÈ 
}ÉÉ ø
C:\Users\jay.ahir\Desktop\OrchardCore-main\OrchardCore-main\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobStorageOptions.cs
	namespace 	
OrchardCore
 
. 
FileStorage !
.! "
	AzureBlob" +
{ 
public 

abstract 
class 
BlobStorageOptions ,
{ 
public 
string 
ConnectionString &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
string 
ContainerName #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
BasePath 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} 