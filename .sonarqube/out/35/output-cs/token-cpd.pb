ƒœ
zC:\Users\jay.ahir\Desktop\OrchardCore-main\OrchardCore-main\src\OrchardCore\OrchardCore.Email.Core\Services\SmtpService.cs
	namespace 	
OrchardCore
 
. 
Email 
. 
Services $
{ 
public 

class 
SmtpService 
: 
ISmtpService +
{ 
private 
const 
string 
EmailExtension +
=, -
$str. 4
;4 5
private 
static 
readonly 
char  $
[$ %
]% &
EmailsSeparator' 6
=7 8
new9 <
char= A
[A B
]B C
{D E
$charF I
,I J
$charK N
}O P
;P Q
private 
readonly 
SmtpSettings %
_options& .
;. /
private 
readonly 
ILogger  
_logger! (
;( )
private 
readonly 
IStringLocalizer )
S* +
;+ ,
public%% 
SmtpService%% 
(%% 
IOptions&& 
<&& 
SmtpSettings&& !
>&&! "
options&&# *
,&&* +
ILogger'' 
<'' 
SmtpService'' 
>''  
logger''! '
,''' (
IStringLocalizer(( 
<(( 
SmtpService(( (
>((( )
stringLocalizer((* 9
))) 
{** 	
_options++ 
=++ 
options++ 
.++ 
Value++ $
;++$ %
_logger,, 
=,, 
logger,, 
;,, 
S-- 
=-- 
stringLocalizer-- 
;--  
}.. 	
public66 
async66 
Task66 
<66 

SmtpResult66 $
>66$ %
	SendAsync66& /
(66/ 0
MailMessage660 ;
message66< C
)66C D
{77 	
if88 
(88 
_options88 
==88 
null88  
)88  !
{99 
return:: 

SmtpResult:: !
.::! "
Failed::" (
(::( )
S::) *
[::* +
$str::+ j
]::j k
)::k l
;::l m
};; 

SmtpResult== 
result== 
;== 
var>> 
response>> 
=>> 
default>> "
(>>" #
string>># )
)>>) *
;>>* +
try?? 
{@@ 
varBB 
senderAddressBB !
=BB" #
StringBB$ *
.BB* +
IsNullOrWhiteSpaceBB+ =
(BB= >
messageBB> E
.BBE F
FromBBF J
)BBJ K
?CC 
_optionsCC 
.CC 
DefaultSenderCC ,
:DD 
messageDD 
.DD 
FromDD "
;DD" #
ifFF 
(FF 
!FF 
StringFF 
.FF 
IsNullOrWhiteSpaceFF .
(FF. /
senderAddressFF/ <
)FF< =
)FF= >
{GG 
messageHH 
.HH 
FromHH  
=HH! "
senderAddressHH# 0
;HH0 1
}II 
varKK 
errorsKK 
=KK 
newKK  
ListKK! %
<KK% &
LocalizedStringKK& 5
>KK5 6
(KK6 7
)KK7 8
;KK8 9
varMM 
mimeMessageMM 
=MM  !
FromMailMessageMM" 1
(MM1 2
messageMM2 9
,MM9 :
errorsMM; A
)MMA B
;MMB C
ifOO 
(OO 
errorsOO 
.OO 
CountOO  
>OO! "
$numOO# $
)OO$ %
{PP 
returnQQ 

SmtpResultQQ %
.QQ% &
FailedQQ& ,
(QQ, -
errorsQQ- 3
.QQ3 4
ToArrayQQ4 ;
(QQ; <
)QQ< =
)QQ= >
;QQ> ?
}RR 
ifTT 
(TT 
mimeMessageTT 
.TT  
ToTT  "
.TT" #
CountTT# (
==TT) +
$numTT, -
&&TT. 0
mimeMessageTT1 <
.TT< =
CcTT= ?
.TT? @
CountTT@ E
==TTF H
$numTTI J
&&TTK M
mimeMessageTTN Y
.TTY Z
BccTTZ ]
.TT] ^
CountTT^ c
==TTd f
$numTTg h
)TTh i
{UU 
returnVV 

SmtpResultVV %
.VV% &
FailedVV& ,
(VV, -
SVV- .
[VV. /
$strVV/ {
]VV{ |
)VV| }
;VV} ~
}WW 
switchYY 
(YY 
_optionsYY  
.YY  !
DeliveryMethodYY! /
)YY/ 0
{ZZ 
case[[ 
SmtpDeliveryMethod[[ +
.[[+ ,
Network[[, 3
:[[3 4
response\\  
=\\! "
await\\# ("
SendOnlineMessageAsync\\) ?
(\\? @
mimeMessage\\@ K
)\\K L
;\\L M
break]] 
;]] 
case^^ 
SmtpDeliveryMethod^^ +
.^^+ ,$
SpecifiedPickupDirectory^^, D
:^^D E
await__ 
SendOfflineMessage__ 0
(__0 1
mimeMessage__1 <
,__< =
_options__> F
.__F G#
PickupDirectoryLocation__G ^
)__^ _
;___ `
break`` 
;`` 
defaultaa 
:aa 
throwbb 
newbb !!
NotSupportedExceptionbb" 7
(bb7 8
$"bb8 :
$strbb: ?
{bb? @
_optionsbb@ H
.bbH I
DeliveryMethodbbI W
}bbW X
$strbbX {
"bb{ |
)bb| }
;bb} ~
}cc 
resultee 
=ee 

SmtpResultee #
.ee# $
Successee$ +
;ee+ ,
}ff 
catchgg 
(gg 
	Exceptiongg 
exgg 
)gg  
{hh 
resultii 
=ii 

SmtpResultii #
.ii# $
Failedii$ *
(ii* +
Sii+ ,
[ii, -
$strii- ^
,ii^ _
exii` b
.iib c
Messageiic j
]iij k
)iik l
;iil m
}jj 
resultll 
.ll 
Responsell 
=ll 
responsell &
;ll& '
returnnn 
resultnn 
;nn 
}oo 	
privateqq 
MimeMessageqq 
FromMailMessageqq +
(qq+ ,
MailMessageqq, 7
messageqq8 ?
,qq? @
IListqqA F
<qqF G
LocalizedStringqqG V
>qqV W
errorsqqX ^
)qq^ _
{rr 	
varss 
submitterAddressss  
=ss! "
Stringss# )
.ss) *
IsNullOrWhiteSpacess* <
(ss< =
messagess= D
.ssD E
SenderssE K
)ssK L
?tt 
_optionstt 
.tt 
DefaultSendertt (
:uu 
messageuu 
.uu 
Senderuu  
;uu  !
varww 
mimeMessageww 
=ww 
newww !
MimeMessageww" -
(ww- .
)ww. /
;ww/ 0
ifyy 
(yy 
!yy 
Stringyy 
.yy 
IsNullOrEmptyyy %
(yy% &
submitterAddressyy& 6
)yy6 7
)yy7 8
{zz 
if{{ 
({{ 
MailboxAddress{{ "
.{{" #
TryParse{{# +
({{+ ,
submitterAddress{{, <
,{{< =
out{{> A
var{{B E
mailBox{{F M
){{M N
){{N O
{|| 
mimeMessage}} 
.}}  
Sender}}  &
=}}' (
mailBox}}) 0
;}}0 1
} 
else
ÄÄ 
{
ÅÅ 
errors
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
S
ÇÇ  
[
ÇÇ  !
$str
ÇÇ! ?
,
ÇÇ? @
submitterAddress
ÇÇA Q
]
ÇÇQ R
)
ÇÇR S
;
ÇÇS T
}
ÉÉ 
}
ÑÑ 
if
ÜÜ 
(
ÜÜ 
!
ÜÜ 
String
ÜÜ 
.
ÜÜ  
IsNullOrWhiteSpace
ÜÜ *
(
ÜÜ* +
message
ÜÜ+ 2
.
ÜÜ2 3
From
ÜÜ3 7
)
ÜÜ7 8
)
ÜÜ8 9
{
áá 
foreach
àà 
(
àà 
var
àà 
address
àà $
in
àà% '
message
àà( /
.
àà/ 0
From
àà0 4
.
àà4 5
Split
àà5 :
(
àà: ;
EmailsSeparator
àà; J
,
ààJ K 
StringSplitOptions
ààL ^
.
àà^ _
TrimEntries
àà_ j
|
ààk l 
StringSplitOptions
ààm 
.àà Ä"
RemoveEmptyEntriesààÄ í
)ààí ì
)ààì î
{
ââ 
if
ää 
(
ää 
MailboxAddress
ää &
.
ää& '
TryParse
ää' /
(
ää/ 0
address
ää0 7
,
ää7 8
out
ää9 <
var
ää= @
mailBox
ääA H
)
ääH I
)
ääI J
{
ãã 
mimeMessage
åå #
.
åå# $
From
åå$ (
.
åå( )
Add
åå) ,
(
åå, -
mailBox
åå- 4
)
åå4 5
;
åå5 6
}
çç 
else
éé 
{
èè 
errors
êê 
.
êê 
Add
êê "
(
êê" #
S
êê# $
[
êê$ %
$str
êê% C
,
êêC D
address
êêE L
]
êêL M
)
êêM N
;
êêN O
}
ëë 
}
íí 
}
ìì 
if
ïï 
(
ïï 
!
ïï 
String
ïï 
.
ïï  
IsNullOrWhiteSpace
ïï *
(
ïï* +
message
ïï+ 2
.
ïï2 3
To
ïï3 5
)
ïï5 6
)
ïï6 7
{
ññ 
foreach
óó 
(
óó 
var
óó 
address
óó $
in
óó% '
message
óó( /
.
óó/ 0
To
óó0 2
.
óó2 3
Split
óó3 8
(
óó8 9
EmailsSeparator
óó9 H
,
óóH I 
StringSplitOptions
óóJ \
.
óó\ ]
TrimEntries
óó] h
|
óói j 
StringSplitOptions
óók }
.
óó} ~!
RemoveEmptyEntriesóó~ ê
)óóê ë
)óóë í
{
òò 
if
ôô 
(
ôô 
MailboxAddress
ôô &
.
ôô& '
TryParse
ôô' /
(
ôô/ 0
address
ôô0 7
,
ôô7 8
out
ôô9 <
var
ôô= @
mailBox
ôôA H
)
ôôH I
)
ôôI J
{
öö 
mimeMessage
õõ #
.
õõ# $
To
õõ$ &
.
õõ& '
Add
õõ' *
(
õõ* +
mailBox
õõ+ 2
)
õõ2 3
;
õõ3 4
}
úú 
else
ùù 
{
ûû 
errors
üü 
.
üü 
Add
üü "
(
üü" #
S
üü# $
[
üü$ %
$str
üü% C
,
üüC D
address
üüE L
]
üüL M
)
üüM N
;
üüN O
}
†† 
}
°° 
}
¢¢ 
if
§§ 
(
§§ 
!
§§ 
String
§§ 
.
§§  
IsNullOrWhiteSpace
§§ *
(
§§* +
message
§§+ 2
.
§§2 3
Cc
§§3 5
)
§§5 6
)
§§6 7
{
•• 
foreach
¶¶ 
(
¶¶ 
var
¶¶ 
address
¶¶ $
in
¶¶% '
message
¶¶( /
.
¶¶/ 0
Cc
¶¶0 2
.
¶¶2 3
Split
¶¶3 8
(
¶¶8 9
EmailsSeparator
¶¶9 H
,
¶¶H I 
StringSplitOptions
¶¶J \
.
¶¶\ ]
TrimEntries
¶¶] h
|
¶¶i j 
StringSplitOptions
¶¶k }
.
¶¶} ~!
RemoveEmptyEntries¶¶~ ê
)¶¶ê ë
)¶¶ë í
{
ßß 
if
®® 
(
®® 
MailboxAddress
®® &
.
®®& '
TryParse
®®' /
(
®®/ 0
address
®®0 7
,
®®7 8
out
®®9 <
var
®®= @
mailBox
®®A H
)
®®H I
)
®®I J
{
©© 
mimeMessage
™™ #
.
™™# $
Cc
™™$ &
.
™™& '
Add
™™' *
(
™™* +
mailBox
™™+ 2
)
™™2 3
;
™™3 4
}
´´ 
else
¨¨ 
{
≠≠ 
errors
ÆÆ 
.
ÆÆ 
Add
ÆÆ "
(
ÆÆ" #
S
ÆÆ# $
[
ÆÆ$ %
$str
ÆÆ% C
,
ÆÆC D
address
ÆÆE L
]
ÆÆL M
)
ÆÆM N
;
ÆÆN O
}
ØØ 
}
∞∞ 
}
±± 
if
≥≥ 
(
≥≥ 
!
≥≥ 
String
≥≥ 
.
≥≥  
IsNullOrWhiteSpace
≥≥ *
(
≥≥* +
message
≥≥+ 2
.
≥≥2 3
Bcc
≥≥3 6
)
≥≥6 7
)
≥≥7 8
{
¥¥ 
foreach
µµ 
(
µµ 
var
µµ 
address
µµ $
in
µµ% '
message
µµ( /
.
µµ/ 0
Bcc
µµ0 3
.
µµ3 4
Split
µµ4 9
(
µµ9 :
EmailsSeparator
µµ: I
,
µµI J 
StringSplitOptions
µµK ]
.
µµ] ^
TrimEntries
µµ^ i
|
µµj k 
StringSplitOptions
µµl ~
.
µµ~ !
RemoveEmptyEntriesµµ ë
)µµë í
)µµí ì
{
∂∂ 
if
∑∑ 
(
∑∑ 
MailboxAddress
∑∑ &
.
∑∑& '
TryParse
∑∑' /
(
∑∑/ 0
address
∑∑0 7
,
∑∑7 8
out
∑∑9 <
var
∑∑= @
mailBox
∑∑A H
)
∑∑H I
)
∑∑I J
{
∏∏ 
mimeMessage
ππ #
.
ππ# $
Bcc
ππ$ '
.
ππ' (
Add
ππ( +
(
ππ+ ,
mailBox
ππ, 3
)
ππ3 4
;
ππ4 5
}
∫∫ 
else
ªª 
{
ºº 
errors
ΩΩ 
.
ΩΩ 
Add
ΩΩ "
(
ΩΩ" #
S
ΩΩ# $
[
ΩΩ$ %
$str
ΩΩ% C
,
ΩΩC D
address
ΩΩE L
]
ΩΩL M
)
ΩΩM N
;
ΩΩN O
}
ææ 
}
øø 
}
¿¿ 
if
¬¬ 
(
¬¬ 
String
¬¬ 
.
¬¬  
IsNullOrWhiteSpace
¬¬ )
(
¬¬) *
message
¬¬* 1
.
¬¬1 2
ReplyTo
¬¬2 9
)
¬¬9 :
)
¬¬: ;
{
√√ 
foreach
ƒƒ 
(
ƒƒ 
var
ƒƒ 
address
ƒƒ $
in
ƒƒ% '
mimeMessage
ƒƒ( 3
.
ƒƒ3 4
From
ƒƒ4 8
)
ƒƒ8 9
{
≈≈ 
mimeMessage
∆∆ 
.
∆∆  
ReplyTo
∆∆  '
.
∆∆' (
Add
∆∆( +
(
∆∆+ ,
address
∆∆, 3
)
∆∆3 4
;
∆∆4 5
}
«« 
}
»» 
else
…… 
{
   
foreach
ÀÀ 
(
ÀÀ 
var
ÀÀ 
address
ÀÀ $
in
ÀÀ% '
message
ÀÀ( /
.
ÀÀ/ 0
ReplyTo
ÀÀ0 7
.
ÀÀ7 8
Split
ÀÀ8 =
(
ÀÀ= >
EmailsSeparator
ÀÀ> M
,
ÀÀM N 
StringSplitOptions
ÀÀO a
.
ÀÀa b 
RemoveEmptyEntries
ÀÀb t
)
ÀÀt u
)
ÀÀu v
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
MailboxAddress
ÕÕ &
.
ÕÕ& '
TryParse
ÕÕ' /
(
ÕÕ/ 0
address
ÕÕ0 7
,
ÕÕ7 8
out
ÕÕ9 <
var
ÕÕ= @
mailBox
ÕÕA H
)
ÕÕH I
)
ÕÕI J
{
ŒŒ 
mimeMessage
œœ #
.
œœ# $
ReplyTo
œœ$ +
.
œœ+ ,
Add
œœ, /
(
œœ/ 0
mailBox
œœ0 7
)
œœ7 8
;
œœ8 9
}
–– 
else
—— 
{
““ 
errors
”” 
.
”” 
Add
”” "
(
””" #
S
””# $
[
””$ %
$str
””% C
,
””C D
address
””E L
]
””L M
)
””M N
;
””N O
}
‘‘ 
}
’’ 
}
÷÷ 
mimeMessage
ÿÿ 
.
ÿÿ 
Subject
ÿÿ 
=
ÿÿ  !
message
ÿÿ" )
.
ÿÿ) *
Subject
ÿÿ* 1
;
ÿÿ1 2
var
⁄⁄ 
body
⁄⁄ 
=
⁄⁄ 
new
⁄⁄ 
BodyBuilder
⁄⁄ &
(
⁄⁄& '
)
⁄⁄' (
;
⁄⁄( )
if
‹‹ 
(
‹‹ 
message
‹‹ 
.
‹‹ 

IsBodyHtml
‹‹ "
)
‹‹" #
{
›› 
body
ﬁﬁ 
.
ﬁﬁ 
HtmlBody
ﬁﬁ 
=
ﬁﬁ 
message
ﬁﬁ  '
.
ﬁﬁ' (
Body
ﬁﬁ( ,
;
ﬁﬁ, -
}
ﬂﬂ 
if
·· 
(
·· 
message
·· 
.
·· 

IsBodyText
·· "
)
··" #
{
‚‚ 
body
„„ 
.
„„ 
TextBody
„„ 
=
„„ 
message
„„  '
.
„„' (
BodyText
„„( 0
;
„„0 1
}
‰‰ 
foreach
ÊÊ 
(
ÊÊ 
var
ÊÊ 

attachment
ÊÊ #
in
ÊÊ$ &
message
ÊÊ' .
.
ÊÊ. /
Attachments
ÊÊ/ :
)
ÊÊ: ;
{
ÁÁ 
if
ÈÈ 
(
ÈÈ 

attachment
ÈÈ 
.
ÈÈ 
Stream
ÈÈ %
!=
ÈÈ& (
null
ÈÈ) -
)
ÈÈ- .
{
ÍÍ 
body
ÎÎ 
.
ÎÎ 
Attachments
ÎÎ $
.
ÎÎ$ %
Add
ÎÎ% (
(
ÎÎ( )

attachment
ÎÎ) 3
.
ÎÎ3 4
Filename
ÎÎ4 <
,
ÎÎ< =

attachment
ÎÎ> H
.
ÎÎH I
Stream
ÎÎI O
)
ÎÎO P
;
ÎÎP Q
}
ÏÏ 
}
ÌÌ 
mimeMessage
ÔÔ 
.
ÔÔ 
Body
ÔÔ 
=
ÔÔ 
body
ÔÔ #
.
ÔÔ# $
ToMessageBody
ÔÔ$ 1
(
ÔÔ1 2
)
ÔÔ2 3
;
ÔÔ3 4
return
ÒÒ 
mimeMessage
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
private
ÙÙ 
bool
ÙÙ +
CertificateValidationCallback
ÙÙ 2
(
ÙÙ2 3
object
ÙÙ3 9
sender
ÙÙ: @
,
ÙÙ@ A
X509Certificate
ÙÙB Q
certificate
ÙÙR ]
,
ÙÙ] ^
	X509Chain
ÙÙ_ h
chain
ÙÙi n
,
ÙÙn o
SslPolicyErrors
ÙÙp 
sslPolicyErrorsÙÙÄ è
)ÙÙè ê
{
ıı 	
if
ˆˆ 
(
ˆˆ 
sslPolicyErrors
ˆˆ 
==
ˆˆ  "
SslPolicyErrors
ˆˆ# 2
.
ˆˆ2 3
None
ˆˆ3 7
)
ˆˆ7 8
return
˜˜ 
true
˜˜ 
;
˜˜ 
_logger
˘˘ 
.
˘˘ 
LogError
˘˘ 
(
˘˘ 
string
˘˘ #
.
˘˘# $
Concat
˘˘$ *
(
˘˘* +
$str
˘˘+ z
,
˘˘z {
$str
˙˙ j
,
˙˙j k
$str
˚˚ L
)
˚˚L M
,
˚˚M N
certificate
¸¸ 
.
¸¸ 
Subject
¸¸ #
,
¸¸# $
certificate
¸¸% 0
.
¸¸0 1
Issuer
¸¸1 7
,
¸¸7 8
certificate
¸¸9 D
.
¸¸D E
GetCertHashString
¸¸E V
(
¸¸V W
)
¸¸W X
,
¸¸X Y
certificate
˝˝ 
.
˝˝ %
GetExpirationDateString
˝˝ 3
(
˝˝3 4
)
˝˝4 5
,
˝˝5 6
sslPolicyErrors
˝˝7 F
)
˝˝F G
;
˝˝G H
if
ˇˇ 
(
ˇˇ 
sslPolicyErrors
ˇˇ 
.
ˇˇ  
HasFlag
ˇˇ  '
(
ˇˇ' (
SslPolicyErrors
ˇˇ( 7
.
ˇˇ7 8*
RemoteCertificateChainErrors
ˇˇ8 T
)
ˇˇT U
&&
ˇˇV X
chain
ˇˇY ^
?
ˇˇ^ _
.
ˇˇ_ `
ChainStatus
ˇˇ` k
!=
ˇˇl n
null
ˇˇo s
)
ˇˇs t
{
ÄÄ 
foreach
ÅÅ 
(
ÅÅ 
var
ÅÅ 
chainStatus
ÅÅ (
in
ÅÅ) +
chain
ÅÅ, 1
.
ÅÅ1 2
ChainStatus
ÅÅ2 =
)
ÅÅ= >
{
ÇÇ 
_logger
ÉÉ 
.
ÉÉ 
LogError
ÉÉ $
(
ÉÉ$ %
$str
ÉÉ% M
,
ÉÉM N
chainStatus
ÉÉO Z
.
ÉÉZ [
Status
ÉÉ[ a
,
ÉÉa b
chainStatus
ÉÉc n
.
ÉÉn o 
StatusInformationÉÉo Ä
)ÉÉÄ Å
;ÉÉÅ Ç
}
ÑÑ 
}
ÖÖ 
return
áá 
false
áá 
;
áá 
}
àà 	
	protected
ää 
virtual
ää 
async
ää 
Task
ää  $#
OnMessageSendingAsync
ää% :
(
ää: ;

SmtpClient
ää; E
client
ääF L
,
ääL M
MimeMessage
ääN Y
message
ääZ a
)
ääa b
{
ãã 	
await
åå 
Task
åå 
.
åå 
CompletedTask
åå $
;
åå$ %
}
çç 	
private
èè 
async
èè 
Task
èè 
<
èè 
string
èè !
>
èè! "$
SendOnlineMessageAsync
èè# 9
(
èè9 :
MimeMessage
èè: E
message
èèF M
)
èèM N
{
êê 	
var
ëë !
secureSocketOptions
ëë #
=
ëë$ %!
SecureSocketOptions
ëë& 9
.
ëë9 :
Auto
ëë: >
;
ëë> ?
if
ìì 
(
ìì 
!
ìì 
_options
ìì 
.
ìì "
AutoSelectEncryption
ìì .
)
ìì. /
{
îî !
secureSocketOptions
ïï #
=
ïï$ %
_options
ïï& .
.
ïï. /
EncryptionMethod
ïï/ ?
switch
ïï@ F
{
ññ "
SmtpEncryptionMethod
óó (
.
óó( )
None
óó) -
=>
óó. 0!
SecureSocketOptions
óó1 D
.
óóD E
None
óóE I
,
óóI J"
SmtpEncryptionMethod
òò (
.
òò( )
SSLTLS
òò) /
=>
òò0 2!
SecureSocketOptions
òò3 F
.
òòF G
SslOnConnect
òòG S
,
òòS T"
SmtpEncryptionMethod
ôô (
.
ôô( )
STARTTLS
ôô) 1
=>
ôô2 4!
SecureSocketOptions
ôô5 H
.
ôôH I
StartTls
ôôI Q
,
ôôQ R
_
öö 
=>
öö !
SecureSocketOptions
öö ,
.
öö, -
Auto
öö- 1
,
öö1 2
}
õõ 
;
õõ 
}
úú 
using
ûû 
var
ûû 
client
ûû 
=
ûû 
new
ûû "

SmtpClient
ûû# -
(
ûû- .
)
ûû. /
;
ûû/ 0
client
†† 
.
†† 1
#ServerCertificateValidationCallback
†† 6
=
††7 8+
CertificateValidationCallback
††9 V
;
††V W
await
¢¢ #
OnMessageSendingAsync
¢¢ '
(
¢¢' (
client
¢¢( .
,
¢¢. /
message
¢¢0 7
)
¢¢7 8
;
¢¢8 9
await
§§ 
client
§§ 
.
§§ 
ConnectAsync
§§ %
(
§§% &
_options
§§& .
.
§§. /
Host
§§/ 3
,
§§3 4
_options
§§5 =
.
§§= >
Port
§§> B
,
§§B C!
secureSocketOptions
§§D W
)
§§W X
;
§§X Y
if
¶¶ 
(
¶¶ 
_options
¶¶ 
.
¶¶  
RequireCredentials
¶¶ +
)
¶¶+ ,
{
ßß 
if
®® 
(
®® 
_options
®® 
.
®® #
UseDefaultCredentials
®® 2
)
®®2 3
{
©© 
await
´´ 
client
´´  
.
´´  !
AuthenticateAsync
´´! 2
(
´´2 3
String
´´3 9
.
´´9 :
Empty
´´: ?
,
´´? @
String
´´A G
.
´´G H
Empty
´´H M
)
´´M N
;
´´N O
}
¨¨ 
else
≠≠ 
if
≠≠ 
(
≠≠ 
!
≠≠ 
String
≠≠  
.
≠≠  ! 
IsNullOrWhiteSpace
≠≠! 3
(
≠≠3 4
_options
≠≠4 <
.
≠≠< =
UserName
≠≠= E
)
≠≠E F
)
≠≠F G
{
ÆÆ 
await
ØØ 
client
ØØ  
.
ØØ  !
AuthenticateAsync
ØØ! 2
(
ØØ2 3
_options
ØØ3 ;
.
ØØ; <
UserName
ØØ< D
,
ØØD E
_options
ØØF N
.
ØØN O
Password
ØØO W
)
ØØW X
;
ØØX Y
}
∞∞ 
}
±± 
if
≥≥ 
(
≥≥ 
!
≥≥ 
String
≥≥ 
.
≥≥ 
IsNullOrEmpty
≥≥ %
(
≥≥% &
_options
≥≥& .
.
≥≥. /
	ProxyHost
≥≥/ 8
)
≥≥8 9
)
≥≥9 :
{
¥¥ 
client
µµ 
.
µµ 
ProxyClient
µµ "
=
µµ# $
new
µµ% (
Socks5Client
µµ) 5
(
µµ5 6
_options
µµ6 >
.
µµ> ?
	ProxyHost
µµ? H
,
µµH I
_options
µµJ R
.
µµR S
	ProxyPort
µµS \
)
µµ\ ]
;
µµ] ^
}
∂∂ 
var
∏∏ 
response
∏∏ 
=
∏∏ 
await
∏∏  
client
∏∏! '
.
∏∏' (
	SendAsync
∏∏( 1
(
∏∏1 2
message
∏∏2 9
)
∏∏9 :
;
∏∏: ;
await
∫∫ 
client
∫∫ 
.
∫∫ 
DisconnectAsync
∫∫ (
(
∫∫( )
true
∫∫) -
)
∫∫- .
;
∫∫. /
return
ºº 
response
ºº 
;
ºº 
}
ΩΩ 	
private
øø 
static
øø 
async
øø 
Task
øø ! 
SendOfflineMessage
øø" 4
(
øø4 5
MimeMessage
øø5 @
message
øøA H
,
øøH I
string
øøJ P
pickupDirectory
øøQ `
)
øø` a
{
¿¿ 	
var
¡¡ 
mailPath
¡¡ 
=
¡¡ 
Path
¡¡ 
.
¡¡  
Combine
¡¡  '
(
¡¡' (
pickupDirectory
¡¡( 7
,
¡¡7 8
Guid
¡¡9 =
.
¡¡= >
NewGuid
¡¡> E
(
¡¡E F
)
¡¡F G
.
¡¡G H
ToString
¡¡H P
(
¡¡P Q
)
¡¡Q R
+
¡¡S T
EmailExtension
¡¡U c
)
¡¡c d
;
¡¡d e
await
¬¬ 
message
¬¬ 
.
¬¬ 
WriteToAsync
¬¬ &
(
¬¬& '
mailPath
¬¬' /
,
¬¬/ 0
CancellationToken
¬¬1 B
.
¬¬B C
None
¬¬C G
)
¬¬G H
;
¬¬H I
}
√√ 	
}
ƒƒ 
}≈≈ 